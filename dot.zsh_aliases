function alias-if-in-path {
    # Split on = and extract 1st word (alias name) and 2nd word (alias value)
    local name=${1[(ws:=:)1]}
    local value=${1[(ws:=:)2]}
    # Command is the first word of the alias value
    local cmd=${value[(w)1]}
    (( $+commands[$cmd] )) && alias $name=$value
}

alias aptup='sudo aptitude update && sudo aptitude safe-upgrade'
alias git-root='cd $(git rev-parse --show-toplevel)'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias rgrep='rgrep --color=auto'
alias week='date +%V'
alias zrehash='source ~/.zshrc'
alias-if-in-path autossh='autossh -M 0 -o "ServerAliveInterval 10"'
alias-if-in-path ec='emacsclient -nq'
alias-if-in-path diff='colordiff'
alias-if-in-path docker='docker.io'
alias-if-in-path v='vagrant ssh'
alias prezto-update='cd ~/.zprezto && git pull --rebase && \
    git submodule update --init --recursive && cd -'
alias prezto-diff='diff -u ~/.zprezto/runcoms/zpreztorc ~/.zpreztorc | less -R'

unfunction alias-if-in-path

case "$OSTYPE" in
    darwin*)
        if (( $+commands[gls] )); then
            alias ls='gls --group-directories-first --color=auto'
        else
            alias ls='ls -G'
        fi
        alias pgrep='pgrep -f -l -i'
        ;;
    freebsd*)
        if (( $+commands[gnuls] )); then
            alias ls='gnuls --color=auto'
        else
            alias ls='ls -G'
        fi
        alias pgrep='pgrep -f -l -i'
        ;;
    *)
        alias ls='ls --group-directories-first --color=auto'
        alias pgrep='pgrep -f -l'
esac

function ssh-rm-host-key {
    if [[ "$1" =~ ^[0-9]+$ ]]; then
        case "$OSTYPE" in
            darwin* | freebsd*)
                sed -i '' -e "${1}d" ~/.ssh/known_hosts
                ;;
            *)
                sed -i'' -e "${1}d" ~/.ssh/known_hosts
        esac
    else
        echo "usage: $0 line-number"
    fi
}

function git-add-push {
    [[ -z "$1" ]] && echo "usage: $0 base-url" && return 1
    [[ ! -d ".git" ]] && echo "Not a git repository" && return 1

    local push; push=$(git remote -v | awk '$3 == "(push)" {print $2}')
    [[ -z "$push" ]] && echo "No existing push url found" && return 1

    local count; count=$(echo "$push" | wc -l)
    (( $count == 1 )) && git remote set-url --add --push origin $push

    local repo=$(basename "$push")
    local new_push="${1}/${repo}"
    if ! echo "$push" | grep -q "$new_push"; then
        git remote set-url --add --push origin $new_push
    else
        echo "$new_push is already added"
    fi
    git remote -v
}

function tmux-rehash-panes {
    if (( ! $+commands[tmux] )); then
        return 1
    fi
    local panes
    panes=$(tmux list-panes -aF \
        '#{session_name}:#{window_index}.#{pane_index},#{pane_pid}')
    local line
    for line in ${(f)panes}; do
        local pane=${line[(ws:,:)1]}
        local pane_pid=${line[(ws:,:)2]}
        # If pane_pid is NOT the parent of any process, then it's most like a
        # interactive shell and we can send our command
        if ! command pgrep -P $pane_pid > /dev/null; then
            command tmux send-keys -t $pane 'source ~/.zshrc' enter
        fi
    done
}
